/**
 * The base type of all types which represent some kind of syntax.
 */
export interface SyntaxNode {
  kind: SyntaxKind;
  flags: NodeFlags;
  autofix?: AutoFix;
  start: number;
  end: number;
}

export const enum NodeFlags {
  /**
   * This node has no flags.
   */
  None = 0,

  NewLine = 1 << 0,
  NoneSimpleParamList = 1 << 1,
  /**
   * This node has some diagnostics associated with it.
   */
  HasErrors = 1 << 2,
  /**
   * This node was inserted by the compiler.
   */
  Synthetic = 1 << 3,
  /**
   * This node has side effects.
   */
  HasSideEffects = 1 << 4,

  IsConst = 1 << 5,

  DisallowIn = 1 << 6,

  IsStatement = 1 << 7,

  ExpressionNode = 1 << 8,

  ChildLess = 1 << 9,

  Generator = 1 << 10,

  Async = 1 << 11,

  Setter = 1 << 12,
  Getter = 1 << 13,
  Constructor = 1 << 14,
  Declared = 1 << 15,
  EscapedKeywordOrIdentifier = 1 << 16,
  ExtendedUnicodeEscape = 1 << 17,
  UnicodeEscape = 1 << 18,
  FloatingPointLiteral = 1 << 19,
  ContainsSeparator = 1 << 20,
  ImplicitOctal = 1 << 21,
  OctalIntegerLiteral = 1 << 22,
  BinaryIntegerLiteral = 1 << 23,
  HexIntegerLiteral = 1 << 24,
  Unterminated = 1 << 25,
  SingleQuote = 1 << 26,
  ContainsInvalidEscape = 1 << 27,
  HasConstructor = 1 << 28,
  Const = 1 << 29
}

/**
 * Types of syntax which can appear in a source file of Kataw.
 */
export const enum SyntaxKind {
  Type = 0xff,

  PrecStart = 8,
  Precedence = 3840,
  IsAssignOp = 4096,
  IsBinaryOp = 32768,
  IsStatementStart = 8192,
  IsIdentifier = 16384,
  IsExpressionStart = 65536,
  IsPropertyOrCall = 131072,
  IsMember = 262144,
  IsEllipsis = 524288,
  Smi = 1048576,
  IsComma = 2097152,
  IsKeyword = 4194304,
  IsFutureReserved = 8388608,
  IsInOrOf = 16777216,
  IsSwitchClause = 33554432,
  IsProperty = 67108864,
  IsStartOfType = 134217728,
  IsPatternStart = 268435456,
  IsLessThanOrLeftParen = 536870912,
  IsSemicolon = 1073741824,

  // Tokens

  Identifier = 134299649,
  NumericLiteral = 201392130,
  StringLiteral = 201392131,
  RegularExpression = 65540,
  FalseKeyword = 205586437,
  TrueKeyword = 20558643,
  NullKeyword = 138477575,
  TemplateCont = 458760,
  TemplateTail = 458761,
  Arrow = 10, // =>
  LeftParen = 537067531,
  LeftBrace = 268501004,
  Period = 131085,
  Ellipsis = 524302,
  RightBrace = 1048591,
  RightParen = 16, // )
  Semicolon = 34611217,
  Comma = 2097170,
  LeftBracket = 336003091,
  RightBracket = 20, // ]
  Colon = 21, // :
  QuestionMark = 22, // ?
  QuestionMarkQuestionMark = 37143,
  QuestionMarkPeriod = 393240,
  SingleQuote = 25, // '
  DoubleQuote = 26, // "
  Increment = 196635,
  Decrement = 196636,
  /* Assign operators */
  Assign = 4125,
  ShiftLeftAssign = 4126,
  ShiftRightAssign = 4127,
  LogicalShiftRightAssign = 4128,
  ExponentiateAssign = 4129,
  AddAssign = 4130,
  SubtractAssign = 4131,
  MultiplyAssign = 4132,
  DivideAssign = 4133,
  ModuloAssign = 4134,
  BitwiseXorAssign = 4135,
  BitwiseOrAssign = 4136,
  BitwiseAndAssign = 4137,
  LogicalOrAssign = 4138,
  LogicalAndAssign = 4139,
  CoalesceAssign = 4140, //44 | IsAssignOp, // ??=

  /* Unary/binary operators */
  TypeofKeyword = 138477613,
  DeleteKeyword = 4259886,
  VoidKeyword = 4259887,
  Negate = 65584,
  Complement = 65585,
  Add = 34098,
  Subtract = 35379,
  InKeyword = 21006388,
  InstanceofKeyword = 4229173,
  Multiply = 67143222,
  Modulo = 35639,
  Divide = 35640,
  Exponentiate = 35897,
  LogicalAnd = 33594,
  LogicalOr = 33339,
  StrictEqual = 34620,
  StrictNotEqual = 34621,
  LooseEqual = 34622,
  LooseNotEqual = 34623,
  LessThanOrEqual = 34880,
  GreaterThanOrEqual = 34881,
  LessThan = 536971330,
  GreaterThan = 34883,
  ShiftLeft = 35140,
  ShiftRight = 35141,
  LogicalShiftRight = 35142,
  BitwiseAnd = 34375,
  BitwiseOr = 134251592,
  BitwiseXor = 134251849,

  /* Variable declaration kinds */
  VarKeyword = 37757002,
  LetKeyword = 41951307,
  ConstKeyword = 37757004,

  /* Other reserved words */
  BreakKeyword = 37757005,
  CaseKeyword = 4194382,
  CatchKeyword = 4202575,
  ClassKeyword = 37814352,
  ContinueKeyword = 37757009,
  DebuggerKeyword = 37757010,
  DefaultKeyword = 4194387,
  DoKeyword = 4202580,
  ElseKeyword = 4194389,
  ExportKeyword = 4202582,
  ExtendsKeyword = 4194391,
  FinallyKeyword = 37757016,
  ForKeyword = 37757017,
  FunctionKeyword = 37814362,
  IfKeyword = 37757019,
  ImportKeyword = 37814364,
  NewKeyword = 138477661,
  ReturnKeyword = 37757022,
  SuperKeyword = 4259935,
  SwitchKeyword = 37757024,
  ThisKeyword = 4259937,
  ThrowKeyword = 37757026,
  TryKeyword = 37757027,
  WhileKeyword = 37757028,
  WithKeyword = 37757029,

  /* Strict mode reserved words */
  ImplementsKeyword = 8388710,
  PackageKeyword = 8388712,
  PrivateKeyword = 8388713,
  ProtectedKeyword = 8388714,
  PublicKeyword = 8388715,
  StaticKeyword = 8388716,
  YieldKeyword = 8454253,

  /* Contextual keywords */
  AsKeyword = 16494,
  AsyncKeyword = 82031,
  AwaitKeyword = 82032,
  ConstructorKeyword = 16497,
  GetKeyword = 16498,
  SetKeyword = 16499,
  FromKeyword = 16500,
  OfKeyword = 16793717,

  //
  UnknownToken = 118,
  //
  ArrayLiteral = 119,
  ExpressionStatement = 120,
  ParenthesizedExpression = 121,

  // top level
  RootNode = 122,
  EndOfFileToken = 1048699,
  // synthetic nodes
  BlockStatement = 124,
  AssignmentExpression = 125,
  UnaryExpression = 126,
  PostfixUpdateExpression = 127,
  PrefixUpdateExpression = 128,
  IndexExpression = 129,
  MemberAccessExpression = 130,
  CallExpression = 131,
  CommaOperator = 132,
  BigIntLiteral = 133,
  BooleanLiteral = 134,
  ThisExpression = 135,
  ArrayType = 136,
  UnionType = 137,
  IntersectionType = 138,
  TypeAnnotation = 139,
  AnyKeyword = 134234252,
  UndefinedKeyword = 134234253,
  BooleanKeyword = 134234254,
  UnknownKeyword = 134234255,

  GenericType = 144,
  QualifiedType = 145,
  TypeParameter = 146,
  TupleType = 147,
  FunctionType = 148,
  FunctionTypeParameter = 149,
  BreakStatement = 150,
  BindingList = 151,
  CaseBlock = 152,
  WithStatement = 153,
  WhileStatement = 154,
  VariableStatement = 155,
  VariableDeclarationList = 156,
  VariableDeclaration = 157,
  ThrowStatement = 158,
  TryStatement = 159,
  SwitchStatement = 160,
  ReturnStatement = 161,
  LexicalDeclaration = 162,
  LabelledStatement = 163,
  IfStatement = 164,
  ForStatement = 165,
  ForInStatement = 166,
  ForOfStatement = 167,
  EmptyStatement = 168,
  DoWhileStatement = 169,
  DefaultClause = 170,
  DebuggerStatement = 171,
  ContinueStatement = 172,
  Catch = 173,
  CatchParameter = 174,
  CaseClause = 175,
  FunctionDeclaration = 176,
  FunctionExpression = 177,
  ClassDeclaration = 178,
  ClassExpression = 189,
  LexicalBinding = 190,
  InterfaceDeclaration = 191,
  InterfaceExtends = 192,
  ObjectTypeProperty = 193,
  ComputedPropertyName = 194,
  ObjectTypeIndexer = 195,
  ObjectTypeCallProperty = 196,
  ConditionalExpression = 197,
  BinaryExpression = 198,
  TypeKeyword = 16583,
  TypeAlias = 200,
  ArrayBindingPattern = 201,
  BindingElementList = 202,
  BindingElement = 203,
  BindingProperty = 204,
  CoverInitializedName = 205,
  ImportCall = 206,
  ImportMeta = 207,
  AwaitExpression = 208,
  MethodDefinition = 209,
  NewExpression = 210,
  NewTarget = 211,
  ObjectBindingPattern = 212,
  BindingPropertyList = 213,
  FormalParameterList = 214,
  FormalParameter = 215,
  FunctionBody = 216,
  FunctionStatementList = 217,
  PropertyDefinitionList = 218,
  PropertyDefinition = 219,
  ObjectLiteral = 220,
  RegularExpressionLiteral = 221,
  SingleNameBinding = 222,
  SpreadElement = 223,
  SpreadProperty = 224,
  Super = 225,
  TaggedTemplate = 226,
  TemplateExpression = 227,
  TemplateSpan = 228,
  YieldExpression = 229,
  OmittedExpression = 230,
  SymbolKeyword = 134234343,
  MixedKeyword = 134234344,
  NumberKeyword = 134234345,
  ObjectKeyword = 134234346,
  StringKeyword = 134234347,
  EmptyKeyword = 134234348,
  NeverKeyword = 134234349,
  BigintKeyword = 134234350,
  StringType = 134217967,
  NumberType = 134217968,
  ObjectType = 134217969,
  NullableType = 134217970,
  TypeofType = 134299891,
  ArrayBindingElement = 244,
  DeclareKeyword = 82165,
  OpaqueKeyword = 16630,
  ObjectTypeSpreadProperty = 247,
  ObjectTypeInternalSlot = 248,
  Block = 249,
  EnumKeyword = 4194554,
  PrivateIdentifier = 67109115,
  Decorator = 34611453,
  DummyIdentifier = 16637,
  UniqueIdentifier = 254,
  PrologueDirective = 255,
  ArgumentList = 256,
  ExportDeclaration = 257,
  ExportDefault = 258,
  ExportFromClause = 259,
  ExportSpecifier = 260,
  ExportsList = 261,
  ImportClause = 262,
  ImportDeclaration = 263,
  ImportSpecifier = 264,
  ImportsList = 265,
  NamedExports = 266,
  NamedImports = 267,
  NamespaceExportDeclaration = 268,
  NullLiteral = 269,
  ElementList = 270,
  ArrowFunction = 271,
  PropertyList = 272,
  LineFeed = 273,
  Whitespace = 274,
  CarriageReturn = 275,
  EscapedKeyword = 276,
  ClassElementList = 277,
  ClassElement = 278,
  ClassHeritage = 279,
  FieldDefinition = 280,
  SemicolonClassElement = 281,
  IndexExpressionChain = 202,
  MemberAccessChain = 203,
  CallChain = 204,
  OptionalExpression = 205,
  OptionalChain = 206,
  DecoratorList = 207,
  FunctionTypeParameterList = 208,
  BooleanType = 209
}

export const enum AutoFix {
  Braces = 1 << 0, // Surround the AST node with '{' and '}'
  Parenthesis = 1 << 1, // Surround the AST node with '(' and ')'
  NotFixable = 0,
  Fixable = 1
}
